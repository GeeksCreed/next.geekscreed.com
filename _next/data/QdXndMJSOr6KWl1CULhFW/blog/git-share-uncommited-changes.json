{"pageProps":{"post":{"_published_at":"2018-12-29T00:00:00.000Z","title":"Git - Share Uncommitted Changes without Pushing","published_at":"Dec 29, 2018","slug":"git-share-uncommited-changes","authors":[{"id":"sasivarnan","name":"Sasivarnan R","bio":"Software Engineer. Tech Enthusiast. Loves coding 💻 and music 🎼.","location":"India","website":"https://new.geekscreed.com","twitter":"iamsasivarnan","linkedin":"sasivarnan","profile_image":"https://avatars0.githubusercontent.com/u/5305600?v=4","cover_image":""}],"content":"<p>Git is the most popular version control system used to manage projects with multiple people working on it.</p>\n<p>It's distributive nature enables developers to work on the projects without worrying about the availability of network or a central server.</p>\n<p>A typical git workflow will be like</p>\n<ul>\n<li>Make the required changes.</li>\n<li><code>commit</code> those changes.</li>\n<li><code>push</code> them to the remote.</li>\n</ul>\n<p><img src=\"./git-workflow.png\" alt=\"Typical Git Workflow\" title=\"A Typical Git Workflow 🐙 😺\"></p>\n<p>What if you have some pending changes which you don't want to commit but have to share them to others / share it to another machine? Let's find out.</p>\n<p>Run the following command in your source git repo with the pending changes.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code>  <span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token operator\">&gt;</span> changes.patch\n</code></pre></div>\n<p>This will create a file called <code>changes.patch</code> which contains diff of pending changes.</p>\n<p><strong>Note:</strong> This will work only in <code>linux</code> or <code>mac</code> machines. To make these commands work in <code>windows</code>, use <code>Git Bash</code>, which comes along with git installation.</p>\n<p>The above command will create a patch of files which are already tracked. In order to create a patch with the untracked files, first stage those files using <code>git add .</code> command and then run,</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code>  <span class=\"token function\">git</span> <span class=\"token function\">diff</span> --cached <span class=\"token operator\">&gt;</span> changes.patch\n</code></pre></div>\n<p>If your repo contains binary files such as images and audio, in order to add them to your patch, stage them first and run,</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code>  <span class=\"token function\">git</span> <span class=\"token function\">diff</span> --cached --binary <span class=\"token operator\">&gt;</span> changes.patch\n</code></pre></div>\n<p>Now share that <code>changes.patch</code> file to your target repo and run,</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code>  <span class=\"token function\">git</span> apply changes.patch\n</code></pre></div>\n<p>Voila 🎉, your uncommitted changes of your source repo are now available in your target repo.</p>\n<p>Hope you will incorporate this in your daily git workflow.</p>\n<p>Feel free to share your thoughts on the comment section below.</p>\n","excerpt":"\nGit is the most popular version control system used to manage projects with multiple people working on it.\n\nIt's distributive nature enable","feature_image":"/images/blog/share-doc.jpg","primary_tag":{"id":"git","name":"Git","slug":"git","description":"Articles around Git","feature_image":""},"tags":["git"]},"tags":[{"id":"git","name":"Git","slug":"git","description":"Articles around Git","feature_image":""}]},"__N_SSG":true}